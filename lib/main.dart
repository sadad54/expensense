// import 'package:exp_ocr/viewmodels/tax_category_notifier.dart';
// import 'package:exp_ocr/views/dummy_data_view.dart';
// import 'package:exp_ocr/views/goals/goals_view.dart';
// import 'package:exp_ocr/views/home/home_view.dart';
// import 'package:exp_ocr/views/budgets/modern_budget_view.dart';
// import 'package:exp_ocr/viewmodels/budget_viewmodel.dart';
// import 'package:exp_ocr/views/home/home_view.dart';
// import 'package:exp_ocr/views/splash_view.dart';
// import 'package:exp_ocr/views/stats/stats_view.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:flutter/material.dart';
// import 'package:firebase_core/firebase_core.dart';
// import 'package:exp_ocr/views/firebase_options.dart'; // Generated by FlutterFire CLI or manually added
// import 'package:exp_ocr/views/transactions/transactions_view.dart'; // Your transaction screen import
// import 'package:exp_ocr/views/auth/login_view.dart';
// import 'package:flutter_animate/flutter_animate.dart';
// import 'package:provider/provider.dart';
// import 'package:exp_ocr/views/auth/signup_view.dart';
// import 'package:exp_ocr/views/settings_view.dart';
// import 'package:exp_ocr/viewmodels/theme_viewmodel.dart';
// import 'package:exp_ocr/views/income_tax_view.dart';
// import 'package:exp_ocr/views/scan/scan_receipt_view.dart';

// void main() async {
//   WidgetsFlutterBinding.ensureInitialized();
//   await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
//   Animate.restartOnHotReload = true;
//   runApp(
//     MultiProvider(
//       providers: [
//         ChangeNotifierProvider(
//           create: (_) => ThemeProvider(),
//         ), // <- For dark mode toggling
//         ChangeNotifierProvider(create: (_) => ModernBudgetProvider()),
//         ChangeNotifierProvider(
//           create: (_) => TaxCategoryNotifier(),
//         ), // For budgets
//       ],
//       child: const MyApp(),
//     ),
//   );
// }

// class MyApp extends StatelessWidget {
//   const MyApp({super.key});

//   @override
//   Widget build(BuildContext context) {
//     final themeProvider = Provider.of<ThemeProvider>(context);

//     const Color primaryBackgroundColor = Color(0xFF1C1C1E);
//     const Color surfaceColor = Color(0xFF2C2C2E);
//     const Color iconBackgroundColor = Color(0xFF3A3A3C);
//     const Color primaryAccentColor = Colors.tealAccent;
//     const Color secondaryAccentColor = Colors.redAccent;

//     final baseTheme = ThemeData(
//       brightness: Brightness.dark,
//       scaffoldBackgroundColor: primaryBackgroundColor,
//       primaryColor: primaryAccentColor,
//       appBarTheme: const AppBarTheme(
//         backgroundColor: primaryBackgroundColor,
//         elevation: 0,
//         iconTheme: IconThemeData(color: Colors.white),
//         titleTextStyle: TextStyle(
//           color: Colors.white,
//           fontSize: 20,
//           fontWeight: FontWeight.bold,
//         ),
//       ),
//       colorScheme: const ColorScheme.dark(
//         primary: primaryAccentColor,
//         secondary: secondaryAccentColor,
//         background: primaryBackgroundColor,
//         surface: surfaceColor,
//         onPrimary: Colors.black,
//         onSecondary: Colors.white,
//         onBackground: Colors.white,
//         onSurface: Colors.white,
//         error: Colors.redAccent,
//         onError: Colors.white,
//       ),
//       cardTheme: CardTheme(
//         color: surfaceColor,
//         elevation: 0,
//         shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
//         margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 6),
//       ),
//       inputDecorationTheme: InputDecorationTheme(
//         filled: true,
//         fillColor: surfaceColor,
//         hintStyle: TextStyle(color: Colors.grey[400]),
//         prefixIconColor: Colors.white70,
//         border: OutlineInputBorder(
//           borderRadius: BorderRadius.circular(12),
//           borderSide: BorderSide.none,
//         ),
//         contentPadding: const EdgeInsets.symmetric(
//           vertical: 14,
//           horizontal: 16,
//         ),
//       ),
//       floatingActionButtonTheme: const FloatingActionButtonThemeData(
//         backgroundColor: primaryAccentColor,
//         foregroundColor: Colors.black,
//       ),
//       textTheme: const TextTheme(
//         titleLarge: TextStyle(
//           color: Colors.white,
//           fontWeight: FontWeight.bold,
//           fontSize: 24,
//         ),
//         bodyMedium: TextStyle(color: Colors.white),
//         labelSmall: TextStyle(color: Colors.grey),
//       ).apply(bodyColor: Colors.white, displayColor: Colors.white),
//       datePickerTheme: DatePickerThemeData(
//         backgroundColor: surfaceColor,
//         headerBackgroundColor: primaryBackgroundColor,
//         headerForegroundColor: Colors.white,
//         surfaceTintColor: primaryBackgroundColor,
//         dayForegroundColor: MaterialStateProperty.all(Colors.white),
//         todayForegroundColor: MaterialStateProperty.all(primaryAccentColor),
//         yearForegroundColor: MaterialStateProperty.all(Colors.white),
//         weekdayStyle: TextStyle(color: Colors.grey[400]),
//       ),
//     );
//     final lightTheme = ThemeData(
//       brightness: Brightness.light,
//       primaryColor: primaryAccentColor,
//       scaffoldBackgroundColor: Colors.white,
//       colorScheme: const ColorScheme.light(
//         primary: primaryAccentColor,
//         secondary: secondaryAccentColor,
//         background: Colors.white,
//         surface: Color(0xFFF2F2F7),
//         onPrimary: Colors.white,
//         onSecondary: Colors.black,
//         onBackground: Colors.black,
//         onSurface: Colors.black,
//         error: Colors.redAccent,
//         onError: Colors.white,
//       ),
//       appBarTheme: const AppBarTheme(
//         backgroundColor: Colors.white,
//         elevation: 0,
//         iconTheme: IconThemeData(color: Colors.black),
//         titleTextStyle: TextStyle(
//           color: Colors.black,
//           fontSize: 20,
//           fontWeight: FontWeight.bold,
//         ),
//       ),
//       cardTheme: CardTheme(
//         color: Colors.white,
//         elevation: 1,
//         shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
//       ),
//       textTheme: const TextTheme(
//         bodyMedium: TextStyle(color: Colors.black),
//         titleLarge: TextStyle(
//           color: Colors.black,
//           fontSize: 24,
//           fontWeight: FontWeight.bold,
//         ),
//       ),
//     );

//     return MaterialApp(
//       title: 'Expense Tracker',
//       themeMode: themeProvider.isDarkMode ? ThemeMode.dark : ThemeMode.light,
//       theme: lightTheme,
//       darkTheme: baseTheme,
//       debugShowCheckedModeBanner: false,
//       initialRoute: '/',
//       routes: {
//         '/': (context) => SplashScreen(),
//         '/transaction': (context) => const TransactionsScreen(),
//         '/signup': (context) => const SignupScreen(),
//         '/main': (context) => AuthWrapper(),
//         '/goals': (context) => const GoalsScreen(),
//         '/budgets': (context) => const ModernBudgetScreen(),
//         '/scan': (context) => ScanReceiptScreen(),
//         '/stats': (context) => StatsScreen(),
//         '/settings':
//             (context) => const SettingsScreen(), // âœ… Settings route added
//         '/incomeTax': (context) => IncomeTaxTrackerScreen(),
//       },
//     );
//   }
// }

// class AuthWrapper extends StatelessWidget {
//   @override
//   Widget build(BuildContext context) {
//     return StreamBuilder<User?>(
//       stream: FirebaseAuth.instance.authStateChanges(),
//       builder: (context, snapshot) {
//         if (snapshot.connectionState == ConnectionState.waiting) {
//           return const Center(child: CircularProgressIndicator());
//         }
//         if (snapshot.hasData) {
//           return HomeScreen();
//         }
//         return LoginScreen();
//       },
//     );
//   }
// } // Start with TransactionScreen
import 'package:exp_ocr/viewmodels/tax_category_notifier.dart';
import 'package:exp_ocr/views/dummy_data_view.dart';
import 'package:exp_ocr/views/goals/goals_view.dart';
import 'package:exp_ocr/views/home/home_view.dart';
import 'package:exp_ocr/views/budgets/modern_budget_view.dart';
import 'package:exp_ocr/viewmodels/budget_viewmodel.dart';
import 'package:exp_ocr/views/splash_view.dart';
import 'package:exp_ocr/views/stats/stats_view.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:exp_ocr/views/firebase_options.dart';
import 'package:exp_ocr/views/transactions/transactions_view.dart';
import 'package:exp_ocr/views/auth/login_view.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:provider/provider.dart';
import 'package:exp_ocr/views/auth/signup_view.dart';
import 'package:exp_ocr/views/settings_view.dart';
import 'package:exp_ocr/viewmodels/theme_viewmodel.dart';
import 'package:exp_ocr/views/income_tax_view.dart';
import 'package:exp_ocr/views/scan/scan_receipt_view.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  await dotenv.load(fileName: ".env");
  Animate.restartOnHotReload = true;

  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => ThemeProvider()),
        ChangeNotifierProvider(create: (_) => ModernBudgetProvider()),
        ChangeNotifierProvider(create: (_) => TaxCategoryNotifier()),
      ],
      child: const MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    final themeProvider = Provider.of<ThemeProvider>(context);

    const Color primaryBackgroundColor = Color(0xFF1C1C1E);
    const Color surfaceColor = Color(0xFF2C2C2E);
    const Color primaryAccentColor = Colors.tealAccent;
    const Color secondaryAccentColor = Colors.redAccent;

    final baseTheme = ThemeData(
      brightness: Brightness.dark,
      scaffoldBackgroundColor: primaryBackgroundColor,
      primaryColor: primaryAccentColor,
      appBarTheme: const AppBarTheme(
        backgroundColor: primaryBackgroundColor,
        elevation: 0,
        iconTheme: IconThemeData(color: Colors.white),
        titleTextStyle: TextStyle(
          color: Colors.white,
          fontSize: 20,
          fontWeight: FontWeight.bold,
        ),
      ),
      colorScheme: const ColorScheme.dark(
        primary: primaryAccentColor,
        secondary: secondaryAccentColor,
        background: primaryBackgroundColor,
        surface: surfaceColor,
        onPrimary: Colors.black,
        onSecondary: Colors.white,
        onBackground: Colors.white,
        onSurface: Colors.white,
        error: Colors.redAccent,
        onError: Colors.white,
      ),
      cardTheme: CardTheme(
        color: surfaceColor,
        elevation: 0,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 6),
      ),
      inputDecorationTheme: InputDecorationTheme(
        filled: true,
        fillColor: surfaceColor,
        hintStyle: TextStyle(color: Colors.grey[400]),
        prefixIconColor: Colors.white70,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide.none,
        ),
        contentPadding: const EdgeInsets.symmetric(
          vertical: 14,
          horizontal: 16,
        ),
      ),
      floatingActionButtonTheme: const FloatingActionButtonThemeData(
        backgroundColor: primaryAccentColor,
        foregroundColor: Colors.black,
      ),
      textTheme: const TextTheme(
        titleLarge: TextStyle(
          color: Colors.white,
          fontWeight: FontWeight.bold,
          fontSize: 24,
        ),
        bodyMedium: TextStyle(color: Colors.white),
        labelSmall: TextStyle(color: Colors.grey),
      ).apply(bodyColor: Colors.white, displayColor: Colors.white),
      datePickerTheme: DatePickerThemeData(
        backgroundColor: surfaceColor,
        headerBackgroundColor: primaryBackgroundColor,
        headerForegroundColor: Colors.white,
        surfaceTintColor: primaryBackgroundColor,
        dayForegroundColor: MaterialStateProperty.all(Colors.white),
        todayForegroundColor: MaterialStateProperty.all(primaryAccentColor),
        yearForegroundColor: MaterialStateProperty.all(Colors.white),
        weekdayStyle: TextStyle(color: Colors.grey[400]),
      ),
    );

    final lightTheme = ThemeData(
      brightness: Brightness.light,
      primaryColor: primaryAccentColor,
      scaffoldBackgroundColor: Colors.white,
      colorScheme: const ColorScheme.light(
        primary: primaryAccentColor,
        secondary: secondaryAccentColor,
        background: Colors.white,
        surface: Color(0xFFF2F2F7),
        onPrimary: Colors.white,
        onSecondary: Colors.black,
        onBackground: Colors.black,
        onSurface: Colors.black,
        error: Colors.redAccent,
        onError: Colors.white,
      ),
      appBarTheme: const AppBarTheme(
        backgroundColor: Colors.white,
        elevation: 0,
        iconTheme: IconThemeData(color: Colors.black),
        titleTextStyle: TextStyle(
          color: Colors.black,
          fontSize: 20,
          fontWeight: FontWeight.bold,
        ),
      ),
      cardTheme: CardTheme(
        color: Colors.white,
        elevation: 1,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
      textTheme: const TextTheme(
        bodyMedium: TextStyle(color: Colors.black),
        titleLarge: TextStyle(
          color: Colors.black,
          fontSize: 24,
          fontWeight: FontWeight.bold,
        ),
      ),
    );

    return MaterialApp(
      title: 'Expense Tracker',
      themeMode: themeProvider.isDarkMode ? ThemeMode.dark : ThemeMode.light,
      theme: lightTheme,
      darkTheme: baseTheme,
      debugShowCheckedModeBanner: false,
      initialRoute: '/',
      routes: {
        '/': (context) => SplashScreen(), // Entry point
        '/transaction': (context) => const TransactionsScreen(),
        '/signup': (context) => const SignupScreen(),
        '/main': (context) => AuthWrapper(),
        '/goals': (context) => const GoalsScreen(),
        '/budgets': (context) => const ModernBudgetScreen(),
        '/scan': (context) => ScanReceiptScreen(),
        '/stats': (context) => StatsScreen(),
        '/settings': (context) => const SettingsScreen(),
        '/incomeTax': (context) => IncomeTaxTrackerScreen(),
      },
    );
  }
}

class AuthWrapper extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return StreamBuilder<User?>(
      stream: FirebaseAuth.instance.authStateChanges(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Scaffold(
            body: Center(child: CircularProgressIndicator()),
          );
        }
        if (snapshot.hasData) {
          return HomeScreen();
        }
        return LoginScreen();
      },
    );
  }
}
