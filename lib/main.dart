import 'package:exp_ocr/home_screen.dart';
import 'package:exp_ocr/scan_receipt_screen.dart';
import 'package:exp_ocr/splash_screen.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:exp_ocr/firebase_options.dart'; // Generated by FlutterFire CLI or manually added
import 'package:exp_ocr/transactions_screen.dart'; // Your transaction screen import
import 'package:exp_ocr/login_screen.dart';

import 'signup_screen.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    // Define the specific colors from your original code
    const Color primaryBackgroundColor = Color(0xFF1C1C1E);
    const Color surfaceColor = Color(0xFF2C2C2E); // For cards, text fields
    const Color iconBackgroundColor = Color(0xFF3A3A3C); // Specific icon bg
    const Color primaryAccentColor = Colors.tealAccent;
    const Color secondaryAccentColor = Colors.redAccent; // For expense amounts

    return MaterialApp(
      title: 'Expense Tracker',
      theme: ThemeData(
        brightness: Brightness.dark, // Ensure dark mode base
        scaffoldBackgroundColor: primaryBackgroundColor,
        primaryColor: primaryAccentColor, // Used for FAB, icons etc.

        appBarTheme: const AppBarTheme(
          backgroundColor: primaryBackgroundColor,
          elevation: 0, // No shadow
          iconTheme: IconThemeData(color: Colors.white), // Icons in AppBar
          titleTextStyle: TextStyle(
            // Default AppBar title style
            color: Colors.white,
            fontSize: 20, // Adjust as needed
            fontWeight: FontWeight.bold,
          ),
        ),

        // Define the color scheme based on your original colors
        colorScheme: const ColorScheme.dark(
          primary: primaryAccentColor, // Main accent (teal)
          secondary:
              secondaryAccentColor, // Secondary accent (red for expenses)
          background: primaryBackgroundColor, // Main background
          surface: surfaceColor, // Background for cards, dialogs, text fields
          onPrimary: Colors.black, // Color on top of primary (e.g., FAB icon)
          onSecondary: Colors.white, // Color on top of secondary
          onBackground: Colors.white, // Color on top of background
          onSurface: Colors.white, // Color on top of surface (most text)
          error: Colors.redAccent, // Error color
          onError: Colors.white,
        ),

        // Card Theme
        cardTheme: CardTheme(
          color: surfaceColor,
          elevation: 0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 6),
        ),

        // Input Decoration Theme (for TextField)
        inputDecorationTheme: InputDecorationTheme(
          filled: true,
          fillColor: surfaceColor,
          hintStyle: TextStyle(color: Colors.grey[400]),
          prefixIconColor: Colors.white70, // Color for search icon
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12),
            borderSide: BorderSide.none,
          ),
          enabledBorder: OutlineInputBorder(
            // Ensure border stays none
            borderRadius: BorderRadius.circular(12),
            borderSide: BorderSide.none,
          ),
          focusedBorder: OutlineInputBorder(
            // Ensure border stays none
            borderRadius: BorderRadius.circular(12),
            borderSide: BorderSide.none,
          ),
          contentPadding: const EdgeInsets.symmetric(
            vertical: 14,
            horizontal: 16,
          ),
        ),

        // Floating Action Button Theme
        floatingActionButtonTheme: const FloatingActionButtonThemeData(
          backgroundColor: primaryAccentColor,
          foregroundColor: Colors.black, // Icon color on FAB
        ),

        // Dropdown Theme (Optional refinement)
        dropdownMenuTheme: DropdownMenuThemeData(
          inputDecorationTheme: InputDecorationTheme(
            // Match text field style
            filled: true,
            fillColor: surfaceColor,
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide.none,
            ),
            contentPadding: const EdgeInsets.symmetric(
              vertical: 12,
              horizontal: 16,
            ),
          ),
          menuStyle: MenuStyle(
            backgroundColor: MaterialStateProperty.all(
              surfaceColor,
            ), // Dropdown background
          ),
        ),

        // Define text theme if needed for specific font weights/sizes
        textTheme: const TextTheme(
          titleLarge: TextStyle(
            // E.g., AppBar Title if not overridden
            color: Colors.white,
            fontWeight: FontWeight.bold,
            fontSize: 24,
          ),
          bodyMedium: TextStyle(color: Colors.white), // Default text
          labelSmall: TextStyle(color: Colors.grey), // Hint text maybe
        ).apply(
          // Apply base color to default text styles
          bodyColor: Colors.white,
          displayColor: Colors.white,
        ),

        // Date Picker Theme (Apply dark theme)
        datePickerTheme: DatePickerThemeData(
          backgroundColor: surfaceColor, // Background of the picker
          headerBackgroundColor: primaryBackgroundColor, // Header area
          headerForegroundColor: Colors.white,
          dayForegroundColor: MaterialStateProperty.resolveWith(
            (states) => Colors.white,
          ),
          todayForegroundColor: MaterialStateProperty.resolveWith(
            (states) => primaryAccentColor,
          ),
          yearForegroundColor: MaterialStateProperty.resolveWith(
            (states) => Colors.white,
          ),
          weekdayStyle: TextStyle(
            color: Colors.grey[400],
          ), // Days of week header
          surfaceTintColor:
              primaryBackgroundColor, // Added for Material 3 consistency
        ),
      ),
      debugShowCheckedModeBanner: false,
      initialRoute: '/', // Start with the SplashScreen
      routes: {
        '/': (context) => SplashScreen(),
        '/scan': (context) => ScanReceiptScreen(),
        '/transaction': (context) => TransactionScreen(),
        '/signup': (context) => SignupScreen(),
        '/main': (context) => AuthWrapper(), // Custom wrapper below
      },
    );
  }
}

class AuthWrapper extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return StreamBuilder<User?>(
      stream: FirebaseAuth.instance.authStateChanges(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        }
        if (snapshot.hasData) {
          return HomeScreen(); // or TransactionsScreen if you prefer
        }
        return LoginScreen();
      },
    );
  }
} // Start with TransactionScreen
